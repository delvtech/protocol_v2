/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { ethers } from "ethers";
import {
  FactoryOptions,
  HardhatEthersHelpers as HardhatEthersHelpersBase,
} from "@nomiclabs/hardhat-ethers/types";

import * as Contracts from ".";

declare module "hardhat/types/runtime" {
  interface HardhatEthersHelpers extends HardhatEthersHelpersBase {
    getContractFactory(
      name: "ERC20Forwarder",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Forwarder__factory>;
    getContractFactory(
      name: "ForwarderFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ForwarderFactory__factory>;
    getContractFactory(
      name: "IERC20",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20__factory>;
    getContractFactory(
      name: "IERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IERC20Permit__factory>;
    getContractFactory(
      name: "IForwarderFactory",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IForwarderFactory__factory>;
    getContractFactory(
      name: "IMultiToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IMultiToken__factory>;
    getContractFactory(
      name: "IPool",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IPool__factory>;
    getContractFactory(
      name: "ITerm",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ITerm__factory>;
    getContractFactory(
      name: "IYearnVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.IYearnVault__factory>;
    getContractFactory(
      name: "Authorizable",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Authorizable__factory>;
    getContractFactory(
      name: "ERC20Permit",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.ERC20Permit__factory>;
    getContractFactory(
      name: "MockERC20YearnVault",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockERC20YearnVault__factory>;
    getContractFactory(
      name: "MockMultiToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockMultiToken__factory>;
    getContractFactory(
      name: "MockYieldAdapter",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MockYieldAdapter__factory>;
    getContractFactory(
      name: "MultiToken",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.MultiToken__factory>;
    getContractFactory(
      name: "Term",
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<Contracts.Term__factory>;

    getContractAt(
      name: "ERC20Forwarder",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Forwarder>;
    getContractAt(
      name: "ForwarderFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ForwarderFactory>;
    getContractAt(
      name: "IERC20",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20>;
    getContractAt(
      name: "IERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IERC20Permit>;
    getContractAt(
      name: "IForwarderFactory",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IForwarderFactory>;
    getContractAt(
      name: "IMultiToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IMultiToken>;
    getContractAt(
      name: "IPool",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IPool>;
    getContractAt(
      name: "ITerm",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ITerm>;
    getContractAt(
      name: "IYearnVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.IYearnVault>;
    getContractAt(
      name: "Authorizable",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Authorizable>;
    getContractAt(
      name: "ERC20Permit",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.ERC20Permit>;
    getContractAt(
      name: "MockERC20YearnVault",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockERC20YearnVault>;
    getContractAt(
      name: "MockMultiToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockMultiToken>;
    getContractAt(
      name: "MockYieldAdapter",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MockYieldAdapter>;
    getContractAt(
      name: "MultiToken",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.MultiToken>;
    getContractAt(
      name: "Term",
      address: string,
      signer?: ethers.Signer
    ): Promise<Contracts.Term>;

    // default types
    getContractFactory(
      name: string,
      signerOrOptions?: ethers.Signer | FactoryOptions
    ): Promise<ethers.ContractFactory>;
    getContractFactory(
      abi: any[],
      bytecode: ethers.utils.BytesLike,
      signer?: ethers.Signer
    ): Promise<ethers.ContractFactory>;
    getContractAt(
      nameOrAbi: string | any[],
      address: string,
      signer?: ethers.Signer
    ): Promise<ethers.Contract>;
  }
}
