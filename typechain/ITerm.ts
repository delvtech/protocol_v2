/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface ITermInterface extends utils.Interface {
  functions: {
    "lock(uint256[],uint256[],uint256,address,address,uint256,uint256)": FunctionFragment;
    "unlock(address,uint256[],uint256[])": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "lock",
    values: [
      BigNumberish[],
      BigNumberish[],
      BigNumberish,
      string,
      string,
      BigNumberish,
      BigNumberish
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "unlock",
    values: [string, BigNumberish[], BigNumberish[]]
  ): string;

  decodeFunctionResult(functionFragment: "lock", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "unlock", data: BytesLike): Result;

  events: {};
}

export interface ITerm extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITermInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    lock(
      internalAmount: BigNumberish[],
      internalAssets: BigNumberish[],
      underlyingAmount: BigNumberish,
      ytDestination: string,
      ptDestination: string,
      ytBeginDate: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "lock(uint256[],uint256[],uint256,address,address,uint256,uint256)"(
      internalAmount: BigNumberish[],
      internalAssets: BigNumberish[],
      underlyingAmount: BigNumberish,
      ytDestination: string,
      ptDestination: string,
      ytBeginDate: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    unlock(
      destination: string,
      tokenIDs: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "unlock(address,uint256[],uint256[])"(
      destination: string,
      tokenIDs: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  lock(
    internalAmount: BigNumberish[],
    internalAssets: BigNumberish[],
    underlyingAmount: BigNumberish,
    ytDestination: string,
    ptDestination: string,
    ytBeginDate: BigNumberish,
    expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "lock(uint256[],uint256[],uint256,address,address,uint256,uint256)"(
    internalAmount: BigNumberish[],
    internalAssets: BigNumberish[],
    underlyingAmount: BigNumberish,
    ytDestination: string,
    ptDestination: string,
    ytBeginDate: BigNumberish,
    expiration: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  unlock(
    destination: string,
    tokenIDs: BigNumberish[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "unlock(address,uint256[],uint256[])"(
    destination: string,
    tokenIDs: BigNumberish[],
    amount: BigNumberish[],
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    lock(
      internalAmount: BigNumberish[],
      internalAssets: BigNumberish[],
      underlyingAmount: BigNumberish,
      ytDestination: string,
      ptDestination: string,
      ytBeginDate: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    "lock(uint256[],uint256[],uint256,address,address,uint256,uint256)"(
      internalAmount: BigNumberish[],
      internalAssets: BigNumberish[],
      underlyingAmount: BigNumberish,
      ytDestination: string,
      ptDestination: string,
      ytBeginDate: BigNumberish,
      expiration: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber, BigNumber]>;

    unlock(
      destination: string,
      tokenIDs: BigNumberish[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "unlock(address,uint256[],uint256[])"(
      destination: string,
      tokenIDs: BigNumberish[],
      amount: BigNumberish[],
      overrides?: CallOverrides
    ): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    lock(
      internalAmount: BigNumberish[],
      internalAssets: BigNumberish[],
      underlyingAmount: BigNumberish,
      ytDestination: string,
      ptDestination: string,
      ytBeginDate: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "lock(uint256[],uint256[],uint256,address,address,uint256,uint256)"(
      internalAmount: BigNumberish[],
      internalAssets: BigNumberish[],
      underlyingAmount: BigNumberish,
      ytDestination: string,
      ptDestination: string,
      ytBeginDate: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    unlock(
      destination: string,
      tokenIDs: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "unlock(address,uint256[],uint256[])"(
      destination: string,
      tokenIDs: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    lock(
      internalAmount: BigNumberish[],
      internalAssets: BigNumberish[],
      underlyingAmount: BigNumberish,
      ytDestination: string,
      ptDestination: string,
      ytBeginDate: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "lock(uint256[],uint256[],uint256,address,address,uint256,uint256)"(
      internalAmount: BigNumberish[],
      internalAssets: BigNumberish[],
      underlyingAmount: BigNumberish,
      ytDestination: string,
      ptDestination: string,
      ytBeginDate: BigNumberish,
      expiration: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    unlock(
      destination: string,
      tokenIDs: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "unlock(address,uint256[],uint256[])"(
      destination: string,
      tokenIDs: BigNumberish[],
      amount: BigNumberish[],
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
