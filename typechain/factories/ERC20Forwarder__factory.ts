/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  ERC20Forwarder,
  ERC20ForwarderInterface,
} from "../ERC20Forwarder";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Approval",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "from",
        type: "address",
      },
      {
        indexed: true,
        internalType: "address",
        name: "to",
        type: "address",
      },
      {
        indexed: false,
        internalType: "uint256",
        name: "value",
        type: "uint256",
      },
    ],
    name: "Transfer",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
    ],
    name: "allowance",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "spender",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "approve",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "who",
        type: "address",
      },
    ],
    name: "balanceOf",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "decimals",
    outputs: [
      {
        internalType: "uint8",
        name: "",
        type: "uint8",
      },
    ],
    stateMutability: "pure",
    type: "function",
  },
  {
    inputs: [],
    name: "name",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "symbol",
    outputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "token",
    outputs: [
      {
        internalType: "contract IMultiToken",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "tokenId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transfer",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "source",
        type: "address",
      },
      {
        internalType: "address",
        name: "recipient",
        type: "address",
      },
      {
        internalType: "uint256",
        name: "amount",
        type: "uint256",
      },
    ],
    name: "transferFrom",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x60c06040908082523461013c576330075a5d60e11b81526000828260048184335af190811561013157809281926100b9575b505060a05260805251610b939081610142823960805181818160be01528181610153015281816102e2015281816103e3015281816104b901528181610644015281816107a501526109d9015260a0518181816101a2015281816102a3015281816103a101528181610507015281816105e90152818161069c015281816107660152610aaa0152f35b91509150823d841161012a575b601f8101601f191682016001600160401b038111838210176101165784918391835281010312610112578051916001600160a01b038316830361010f5750602001513880610031565b80fd5b5080fd5b634e487b7160e01b84526041600452602484fd5b503d6100c6565b8351903d90823e3d90fd5b600080fdfe608060408181526004918236101561001657600080fd5b600092833560e01c91826306fdde031461072f57508163095ea7b31461060c57816317d70f7c146105d157816323b872dd14610477578163313ce5671461045b57816370a082311461035557816395d89b4114610268578163a9059cbb1461011a57508063dd62ed3e146100e65763fc0c546a1461009357600080fd5b346100e257816003193601126100e2576020905173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000168152f35b5080fd5b50346100e257806003193601126100e257602090610113610105610867565b61010d61088f565b906109c0565b9051908152f35b905034610264578160031936011261026457610134610867565b90602435918473ffffffffffffffffffffffffffffffffffffffff92837f00000000000000000000000000000000000000000000000000000000000000001690813b156102645786517fe44808bc0000000000000000000000000000000000000000000000000000000081527f0000000000000000000000000000000000000000000000000000000000000000918101918252336020830181905273ffffffffffffffffffffffffffffffffffffffff861660408401526060830188905260808301529291839182908490829060a00103925af1801561025a576020965061024b575b50835192835216907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef843392a35160018152f35b610254906108b2565b38610217565b85513d88823e3d90fd5b8280fd5b919050346102645782600319360112610264578051917f4e41a1fb0000000000000000000000000000000000000000000000000000000083527f000000000000000000000000000000000000000000000000000000000000000090830152828260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561034b57836103229493610326575b5050519182918261081d565b0390f35b6103439293503d8091833e61033b81836108f5565b810190610936565b903880610316565b81513d85823e3d90fd5b8383346100e257602092836003193601126102645783610373610867565b9160448451809481937f3656eec20000000000000000000000000000000000000000000000000000000083527f00000000000000000000000000000000000000000000000000000000000000009083015273ffffffffffffffffffffffffffffffffffffffff80911660248301527f0000000000000000000000000000000000000000000000000000000000000000165afa92831561045057809361041b575b505051908152f35b909192508382813d8311610449575b61043481836108f5565b81010312610446575051908380610413565b80fd5b503d61042a565b8251903d90823e3d90fd5b5050346100e257816003193601126100e2576020905160128152f35b90503461026457606060031936011261026457610492610867565b9061049b61088f565b936044359173ffffffffffffffffffffffffffffffffffffffff91827f000000000000000000000000000000000000000000000000000000000000000016803b156100e25786517fe44808bc0000000000000000000000000000000000000000000000000000000081527f000000000000000000000000000000000000000000000000000000000000000093810193845273ffffffffffffffffffffffffffffffffffffffff80881660208601528916604085015260608401869052336080850152928291849182908490829060a00103925af19081156105c65750918060209788937fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef956105b7575b50875195865216941692a35160018152f35b6105c0906108b2565b386105a5565b8651903d90823e3d90fd5b5050346100e257816003193601126100e257602090517f00000000000000000000000000000000000000000000000000000000000000008152f35b905034610264578160031936011261026457610626610867565b602435908473ffffffffffffffffffffffffffffffffffffffff91827f00000000000000000000000000000000000000000000000000000000000000001694853b156102645760849083885195869485937f4ed2d6ac0000000000000000000000000000000000000000000000000000000085527f00000000000000000000000000000000000000000000000000000000000000009085015216978860248401528760448401523360648401525af180156107255760209550610716575b5082519081527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925843392a35160018152f35b61071f906108b2565b386106e4565b84513d87823e3d90fd5b929150346107e457836003193601126107e4577ead800c0000000000000000000000000000000000000000000000000000000083527f000000000000000000000000000000000000000000000000000000000000000090830152828260248173ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000165afa91821561034b57836103229493610326575050519182918261081d565b8380fd5b918091926000905b828210610808575011610801575050565b6000910152565b915080602091830151818601520182916107f0565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f6040936020845261086081518092816020880152602088880191016107e8565b0116010190565b6004359073ffffffffffffffffffffffffffffffffffffffff8216820361088a57565b600080fd5b6024359073ffffffffffffffffffffffffffffffffffffffff8216820361088a57565b67ffffffffffffffff81116108c657604052565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b90601f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0910116810190811067ffffffffffffffff8211176108c657604052565b60208183031261088a57805167ffffffffffffffff9182821161088a57019082601f8301121561088a5781519081116108c6576040519261099f60207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f85011601856108f5565b8184526020828401011161088a576109bd91602080850191016107e8565b90565b73ffffffffffffffffffffffffffffffffffffffff91827f0000000000000000000000000000000000000000000000000000000000000000169280604051937fe985e9c50000000000000000000000000000000000000000000000000000000085521691826004850152168060248401526020928381604481885afa908115610b1b57600091610b27575b5015610a7957505050507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff90565b6064839260405195869384927f21ff32a90000000000000000000000000000000000000000000000000000000084527f00000000000000000000000000000000000000000000000000000000000000006004850152602484015260448301525afa908115610b1b57600091610aef575b50905090565b82813d8311610b14575b610b0381836108f5565b810103126104465750518038610ae9565b503d610af9565b6040513d6000823e3d90fd5b8481813d8311610b56575b610b3c81836108f5565b810103126100e25751908115158203610446575038610a4b565b503d610b3256fea26469706673582212202d5910645ec23483048d3bf545b16b65a0c7ade1dad7b5ea4d828ee8ce76809e64736f6c634300080f0033";

type ERC20ForwarderConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ERC20ForwarderConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class ERC20Forwarder__factory extends ContractFactory {
  constructor(...args: ERC20ForwarderConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ERC20Forwarder> {
    return super.deploy(overrides || {}) as Promise<ERC20Forwarder>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): ERC20Forwarder {
    return super.attach(address) as ERC20Forwarder;
  }
  connect(signer: Signer): ERC20Forwarder__factory {
    return super.connect(signer) as ERC20Forwarder__factory;
  }
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ERC20ForwarderInterface {
    return new utils.Interface(_abi) as ERC20ForwarderInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): ERC20Forwarder {
    return new Contract(address, _abi, signerOrProvider) as ERC20Forwarder;
  }
}
