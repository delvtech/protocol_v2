/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import { FunctionFragment, Result } from "@ethersproject/abi";
import { Listener, Provider } from "@ethersproject/providers";
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from "./common";

export interface IPoolInterface extends utils.Interface {
  functions: {
    "exitPool(uint256,uint256,address)": FunctionFragment;
    "joinPool(uint256,uint256,uint256,address)": FunctionFragment;
    "quote(uint256,bool,uint256)": FunctionFragment;
    "rollover(uint256,uint256,uint256)": FunctionFragment;
    "trade(uint256,bool,uint256,uint256,address)": FunctionFragment;
    "virtualPrincipalSale(uint256,uint256,uint256,address)": FunctionFragment;
  };

  encodeFunctionData(
    functionFragment: "exitPool",
    values: [BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "joinPool",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "quote",
    values: [BigNumberish, boolean, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "rollover",
    values: [BigNumberish, BigNumberish, BigNumberish]
  ): string;
  encodeFunctionData(
    functionFragment: "trade",
    values: [BigNumberish, boolean, BigNumberish, BigNumberish, string]
  ): string;
  encodeFunctionData(
    functionFragment: "virtualPrincipalSale",
    values: [BigNumberish, BigNumberish, BigNumberish, string]
  ): string;

  decodeFunctionResult(functionFragment: "exitPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "joinPool", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "quote", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "rollover", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "trade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "virtualPrincipalSale",
    data: BytesLike
  ): Result;

  events: {};
}

export interface IPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    exitPool(
      lpOut: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "exitPool(uint256,uint256,address)"(
      lpOut: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    joinPool(
      amountBond: BigNumberish,
      amountBase: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "joinPool(uint256,uint256,uint256,address)"(
      amountBond: BigNumberish,
      amountBase: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    quote(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    "quote(uint256,bool,uint256)"(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<[BigNumber] & { amountOut: BigNumber }>;

    rollover(
      lpAmount: BigNumberish,
      inputPoolId: BigNumberish,
      outputPoolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "rollover(uint256,uint256,uint256)"(
      lpAmount: BigNumberish,
      inputPoolId: BigNumberish,
      outputPoolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    trade(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      minAmountOut: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "trade(uint256,bool,uint256,uint256,address)"(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      minAmountOut: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    virtualPrincipalSale(
      soldAmount: BigNumberish,
      poolId: BigNumberish,
      maxAmountIn: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;

    "virtualPrincipalSale(uint256,uint256,uint256,address)"(
      soldAmount: BigNumberish,
      poolId: BigNumberish,
      maxAmountIn: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<ContractTransaction>;
  };

  exitPool(
    lpOut: BigNumberish,
    poolId: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "exitPool(uint256,uint256,address)"(
    lpOut: BigNumberish,
    poolId: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  joinPool(
    amountBond: BigNumberish,
    amountBase: BigNumberish,
    poolId: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "joinPool(uint256,uint256,uint256,address)"(
    amountBond: BigNumberish,
    amountBase: BigNumberish,
    poolId: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  quote(
    amountIn: BigNumberish,
    baseIn: boolean,
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  "quote(uint256,bool,uint256)"(
    amountIn: BigNumberish,
    baseIn: boolean,
    poolId: BigNumberish,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  rollover(
    lpAmount: BigNumberish,
    inputPoolId: BigNumberish,
    outputPoolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "rollover(uint256,uint256,uint256)"(
    lpAmount: BigNumberish,
    inputPoolId: BigNumberish,
    outputPoolId: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  trade(
    amountIn: BigNumberish,
    baseIn: boolean,
    poolId: BigNumberish,
    minAmountOut: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "trade(uint256,bool,uint256,uint256,address)"(
    amountIn: BigNumberish,
    baseIn: boolean,
    poolId: BigNumberish,
    minAmountOut: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  virtualPrincipalSale(
    soldAmount: BigNumberish,
    poolId: BigNumberish,
    maxAmountIn: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  "virtualPrincipalSale(uint256,uint256,uint256,address)"(
    soldAmount: BigNumberish,
    poolId: BigNumberish,
    maxAmountIn: BigNumberish,
    destination: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    exitPool(
      lpOut: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseOut: BigNumber; bondOut: BigNumber }
    >;

    "exitPool(uint256,uint256,address)"(
      lpOut: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseOut: BigNumber; bondOut: BigNumber }
    >;

    joinPool(
      amountBond: BigNumberish,
      amountBase: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "joinPool(uint256,uint256,uint256,address)"(
      amountBond: BigNumberish,
      amountBase: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    quote(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quote(uint256,bool,uint256)"(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rollover(
      lpAmount: BigNumberish,
      inputPoolId: BigNumberish,
      outputPoolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseOut: BigNumber; bondOut: BigNumber }
    >;

    "rollover(uint256,uint256,uint256)"(
      lpAmount: BigNumberish,
      inputPoolId: BigNumberish,
      outputPoolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { baseOut: BigNumber; bondOut: BigNumber }
    >;

    trade(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      minAmountOut: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "trade(uint256,bool,uint256,uint256,address)"(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      minAmountOut: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    virtualPrincipalSale(
      soldAmount: BigNumberish,
      poolId: BigNumberish,
      maxAmountIn: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { basePaid: BigNumber; ytBought: BigNumber }
    >;

    "virtualPrincipalSale(uint256,uint256,uint256,address)"(
      soldAmount: BigNumberish,
      poolId: BigNumberish,
      maxAmountIn: BigNumberish,
      destination: string,
      overrides?: CallOverrides
    ): Promise<
      [BigNumber, BigNumber] & { basePaid: BigNumber; ytBought: BigNumber }
    >;
  };

  filters: {};

  estimateGas: {
    exitPool(
      lpOut: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "exitPool(uint256,uint256,address)"(
      lpOut: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    joinPool(
      amountBond: BigNumberish,
      amountBase: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "joinPool(uint256,uint256,uint256,address)"(
      amountBond: BigNumberish,
      amountBase: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    quote(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    "quote(uint256,bool,uint256)"(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    rollover(
      lpAmount: BigNumberish,
      inputPoolId: BigNumberish,
      outputPoolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "rollover(uint256,uint256,uint256)"(
      lpAmount: BigNumberish,
      inputPoolId: BigNumberish,
      outputPoolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    trade(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      minAmountOut: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "trade(uint256,bool,uint256,uint256,address)"(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      minAmountOut: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    virtualPrincipalSale(
      soldAmount: BigNumberish,
      poolId: BigNumberish,
      maxAmountIn: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;

    "virtualPrincipalSale(uint256,uint256,uint256,address)"(
      soldAmount: BigNumberish,
      poolId: BigNumberish,
      maxAmountIn: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    exitPool(
      lpOut: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "exitPool(uint256,uint256,address)"(
      lpOut: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    joinPool(
      amountBond: BigNumberish,
      amountBase: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "joinPool(uint256,uint256,uint256,address)"(
      amountBond: BigNumberish,
      amountBase: BigNumberish,
      poolId: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    quote(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    "quote(uint256,bool,uint256)"(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    rollover(
      lpAmount: BigNumberish,
      inputPoolId: BigNumberish,
      outputPoolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "rollover(uint256,uint256,uint256)"(
      lpAmount: BigNumberish,
      inputPoolId: BigNumberish,
      outputPoolId: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    trade(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      minAmountOut: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "trade(uint256,bool,uint256,uint256,address)"(
      amountIn: BigNumberish,
      baseIn: boolean,
      poolId: BigNumberish,
      minAmountOut: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    virtualPrincipalSale(
      soldAmount: BigNumberish,
      poolId: BigNumberish,
      maxAmountIn: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;

    "virtualPrincipalSale(uint256,uint256,uint256,address)"(
      soldAmount: BigNumberish,
      poolId: BigNumberish,
      maxAmountIn: BigNumberish,
      destination: string,
      overrides?: Overrides & { from?: string | Promise<string> }
    ): Promise<PopulatedTransaction>;
  };
}
